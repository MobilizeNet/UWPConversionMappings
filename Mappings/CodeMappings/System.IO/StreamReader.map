<MapUnit xmlns="clr-namespace:Mobilize.Mappers.Extensibility.Core;assembly=Mobilize.ExtensibleMappers"
         xmlns:map="clr-namespace:Mobilize.Mappers.Extensibility.Code;assembly=Mobilize.ExtensibleMappers">
  <MapUnit.Elements>
    <map:CodeMapPackage Type="System.IO.StreamReader">
      <map:CodeMapPackage.Maps>
        
        <map:CodeMap Kind="Type">
          <map:CodeMap.Action>
            <map:Keep />
          </map:CodeMap.Action>
        </map:CodeMap>

        <map:CodeMap Kind="New">
          <map:Conditional>
            <!-- Case for one argument of tipe String -->
            <map:Case>
              <map:Case.Condition>
                <map:WithConstructorCall>
                  <map:ArgumentCount>1</map:ArgumentCount>
                  <map:WithArgument Position="0">
                    <map:IsExpressionOfType>System.String</map:IsExpressionOfType>
                    <map:AssignName>$path</map:AssignName>
                  </map:WithArgument>
                </map:WithConstructorCall>
              </map:Case.Condition>
              <map:Case.Action>
                <map:ReplaceWithTemplate>
                  new StreamReader(System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication().OpenFile($path, FileMode.Open))
                </map:ReplaceWithTemplate>
              </map:Case.Action>
            </map:Case>
            <!-- Case for two arguments, first parameter of type string and second parameter type boolean -->
            <map:Case>
              <map:Case.Condition>
                <map:WithConstructorCall>
                  <map:ArgumentCount>2</map:ArgumentCount>
                  <map:WithArgument Position="0">
                    <map:IsExpressionOfType>System.String</map:IsExpressionOfType>
                    <map:AssignName>$path</map:AssignName>
                  </map:WithArgument>
                  <map:WithArgument Position="1">
                    <map:IsExpressionOfType>System.Boolean</map:IsExpressionOfType>
                    <map:AssignName>$detect</map:AssignName>
                  </map:WithArgument>
                </map:WithConstructorCall>
              </map:Case.Condition>
              <map:Case.Action>
                <map:ReplaceWithTemplate>
                  new StreamReader(System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication().OpenFile($path, FileMode.Open), $detect)
                </map:ReplaceWithTemplate>
              </map:Case.Action>
            </map:Case>
            <!-- Case for two arguments, first parameter of type string and second parameter type Enconding -->
            <map:Case>
              <map:Case.Condition>
                <map:WithConstructorCall>
                  <map:ArgumentCount>2</map:ArgumentCount>
                  <map:WithArgument Position="0">
                    <map:IsExpressionOfType>System.String</map:IsExpressionOfType>
                    <map:AssignName>$path</map:AssignName>
                  </map:WithArgument>
                  <map:WithArgument Position="1">
                    <map:IsExpressionOfType>System.Text.Encoding</map:IsExpressionOfType>
                    <map:AssignName>$encoding</map:AssignName>
                  </map:WithArgument>
                </map:WithConstructorCall>
              </map:Case.Condition>
              <map:Case.Action>
                <map:ReplaceWithTemplate>
                  new StreamReader(System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication().OpenFile($path, FileMode.Open), $encoding)
                </map:ReplaceWithTemplate>
              </map:Case.Action>
            </map:Case>
            <!-- Case for three arguments and first parameter of type string -->
            <map:Case>
              <map:Case.Condition>
                <map:WithConstructorCall>
                  <map:ArgumentCount>3</map:ArgumentCount>
                  <map:WithArgument Position="0">
                    <map:IsExpressionOfType>System.String</map:IsExpressionOfType>
                    <map:AssignName>$path</map:AssignName>
                  </map:WithArgument>
                  <map:WithArgument Position="1">
                    <map:IsExpressionOfType>System.Text.Encoding</map:IsExpressionOfType>
                    <map:AssignName>$encoding</map:AssignName>
                  </map:WithArgument>                  
                  <map:WithArgument Position="2">
                    <map:IsExpressionOfType>System.Boolean</map:IsExpressionOfType>
                    <map:AssignName>$detect</map:AssignName>                  
                  </map:WithArgument>
                </map:WithConstructorCall>
              </map:Case.Condition>
              <map:Case.Action>
                <map:ReplaceWithTemplate>
                  new StreamReader(System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication().OpenFile($path, FileMode.Open), $encoding, $detect)
                </map:ReplaceWithTemplate>
              </map:Case.Action>
            </map:Case>
            <!-- Case for four arguments and first parameter of type string -->
            <map:Case>
              <map:Case.Condition>
                <map:WithConstructorCall>
                  <map:ArgumentCount>4</map:ArgumentCount>
                  <map:WithArgument Position="0">
                    <map:IsExpressionOfType>System.String</map:IsExpressionOfType>
                    <map:AssignName>$path</map:AssignName>
                  </map:WithArgument>
                  <map:WithArgument Position="1">
                    <map:IsExpressionOfType>System.Text.Encoding</map:IsExpressionOfType>
                    <map:AssignName>$encoding</map:AssignName>
                  </map:WithArgument>
                  <map:WithArgument Position="2">
                    <map:IsExpressionOfType>System.Boolean</map:IsExpressionOfType>
                    <map:AssignName>$detect</map:AssignName>
                  </map:WithArgument>
                  <map:WithArgument Position="3">
                    <map:IsExpressionOfType>System.Int32</map:IsExpressionOfType>
                    <map:AssignName>$buffer</map:AssignName>
                  </map:WithArgument>
                </map:WithConstructorCall>
              </map:Case.Condition>
              <map:Case.Action>
                <map:ReplaceWithTemplate>
                  new StreamReader(System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication().OpenFile($path, FileMode.Open), $encoding, $detect, $buffer)
                </map:ReplaceWithTemplate>
              </map:Case.Action>
            </map:Case>
            <map:Default>
              <map:Keep/>
            </map:Default>
          </map:Conditional>
        </map:CodeMap>

        <map:CodeMap Kind="Call" MemberName="Close">
          <map:CodeMap.Action>
             <map:RedirectCall NewMethod="Dispose" />
          </map:CodeMap.Action>
        </map:CodeMap>
        
      </map:CodeMapPackage.Maps>
    </map:CodeMapPackage>
  </MapUnit.Elements>
</MapUnit>